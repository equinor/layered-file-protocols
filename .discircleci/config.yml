version: 2.1

commands:
  install_build_deps:
    parameters:
      sudo:
        type: boolean
        default: false
      extra:
        type: string
        default: ""
    steps:
      - run:
          name: Install dependencies
          command: |
            <<#parameters.sudo >> sudo <</parameters.sudo >> apt-get update
            <<#parameters.sudo >> sudo <</parameters.sudo >> apt-get install \
            -y cmake g++ git libfmt-dev << parameters.extra >>

  cmake_build:
    description: Build and test
    parameters:
      type:
        description: Build type
        type: enum
        default: Release
        enum: ["Release", "Debug", "RelWithDebInfo"]
      scan:
        description: scan-build or similar command prefix
        type: string
        default: ""
      cmakeflags:
        description: Extra cmake flags
        type: string
        default: ""
      cxxflags:
        description: Extra c++ flags
        type: string
        default: ""
    steps:
      - run:
          name: Configure
          command: |
            mkdir build
            cd build
            << parameters.scan >> \
            cmake -DBUILD_SHARED_LIBS=ON \
                  -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
                  -DCMAKE_BUILD_TYPE=<< parameters.type >> \
                  -DCMAKE_CXX_FLAGS=<< parameters.cxxflags >> \
                  << parameters.cmakeflags >> \
                  ..
      - run:
          name: Build and install
          command: << parameters.scan >> cmake --build build --target install
      - run:
          name: Test
          command: |
            cd build
            ctest --output-on-failure

jobs:
  gcc:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - install_build_deps
      - cmake_build

  clang:
    docker:
      - image: debian:stable
    environment:
      CC: /usr/bin/clang
      CXX: /usr/bin/clang++
    steps:
      - checkout
      - install_build_deps:
          extra: clang
      - cmake_build

  debug:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - install_build_deps
      - cmake_build:
          type: Debug
          cxxflags: -Werror

  docs-and-examples:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - install_build_deps:
          extra: python3-breathe python3-sphinx doxygen
      - cmake_build:
          cmakeflags: -DBUILD_DOC=ON -DBUILD_EXAMPLES=ON

  scan-build:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - install_build_deps:
          extra: clang clang-tools libfindbin-libs-perl
      - cmake_build:
          scan: scan-build --status-bugs

  ubsan:
    docker:
      - image: ubuntu:rolling
    environment:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      - install_build_deps:
          extra: libubsan1
      - cmake_build:
          type: RelWithDebInfo
          cxxflags: -fsanitize=address,undefined

  bigendian:
    machine:
      image: ubuntu-1604:201903-01 #is docker 18.09, so should contain buildKit
    #resource_class: large
    parameters:
      setup_image_path:
        type: string
        default: ~/project/artifacts/lfp_bigendian_setup.tar
      setup_image_name:
        type: string
        default: ci_lfp_bigendian_setup
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            mkdir -p "$(dirname << parameters.setup_image_path >>)"
            # the core functionality allowing us to build on whatever architecture
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - restore_cache:
          key: vers1-setup-image-{{ checksum "~/project/.circleci/images/setup/Dockerfile" }}
      - run:
          name: Assure setup image loaded locally
          command: |
            if [ ! -f << parameters.setup_image_path >> ]; then
               echo "Local docker setup image not found. Recreating"
               cp ~/project/.circleci/images/setup/Dockerfile ~/project/Dockerfile
               export DOCKER_BUILDKIT=1
               docker build -t << parameters.setup_image_name >> --progress plain .
               docker save << parameters.setup_image_name >> > << parameters.setup_image_path >>
            else
               echo "Local docker setup image found. Loading"
               docker load -i << parameters.setup_image_path >>
            fi
      - save_cache:
          key: vers1-setup-image-{{ checksum "~/project/.circleci/images/setup/Dockerfile" }}
          paths:
            << parameters.setup_image_path >>
      - run:
          name: Build the image
          command: |
            cp ~/project/.circleci/images/build/Dockerfile ~/project/Dockerfile
            export DOCKER_BUILDKIT=1
            docker build -t lfp --progress plain --build-arg image=<< parameters.setup_image_name >>  .

workflows:
  version: 2

  build:
    jobs:
      - gcc
      - clang
      - debug
      - docs-and-examples

  static-analysis:
    jobs:
      - scan-build

  runtime-analysis:
    jobs:
      - ubsan

  arch:
    jobs:
      - bigendian
